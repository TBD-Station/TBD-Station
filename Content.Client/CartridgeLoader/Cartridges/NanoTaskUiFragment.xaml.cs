using System.Linq;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Content.Shared.CartridgeLoader.Cartridges;
using Robust.Client.Graphics;

namespace Content.Client.CartridgeLoader.Cartridges;

/// <summary>
///     Class displaying the main UI of NanoTask
/// </summary>
[GenerateTypedNameReferences]
public sealed partial class NanoTaskUiFragment : BoxContainer
{
    public Action<uint>? OpenTask;
    public Action<uint>? ToggleTaskCompletion;
    public Action<NanoTaskTable>? NewTask;
    public List<NanoTaskItemAndId> Tasks = new();

    public NanoTaskUiFragment()
    {
        RobustXamlLoader.Load(this);
        Orientation = LayoutOrientation.Vertical;
        HorizontalExpand = true;
        VerticalExpand = true;

        StationTaskTable.NewTaskButton.OnPressed += _ => NewTask?.Invoke(StationTaskTable);
    }

    public void UpdateState(List<NanoTaskItemAndId> stationTasks, Dictionary<string, List<NanoTaskItemAndId>> departmentTasks)
    {
        TabsCategory.Visible = true;
        ConnectionBox.Visible = false;
        OfflineBox.Visible = false;

        StationTaskTable.Clear();

        StationTaskTable.HighPriority.HeaderLabel.Text = Loc.GetString("nano-task-ui-heading-high-priority-tasks", ("amount", stationTasks.Count(task => task.Data.Priority == NanoTaskPriority.High)));
        StationTaskTable.MediumPriority.HeaderLabel.Text = Loc.GetString("nano-task-ui-heading-medium-priority-tasks", ("amount", stationTasks.Count(task => task.Data.Priority == NanoTaskPriority.Medium)));
        StationTaskTable.LowPriority.HeaderLabel.Text = Loc.GetString("nano-task-ui-heading-low-priority-tasks", ("amount", stationTasks.Count(task => task.Data.Priority == NanoTaskPriority.Low)));

        foreach (var task in stationTasks)
        {
            var container = task.Data.Priority switch
            {
                NanoTaskPriority.High => StationTaskTable.HighContainer,
                NanoTaskPriority.Medium => StationTaskTable.MediumContainer,
                NanoTaskPriority.Low => StationTaskTable.LowContainer,
            };
            var control = new NanoTaskItemControl(task);
            container.AddChild(control);
            control.OnMainPressed += id => OpenTask?.Invoke(id);
            control.OnDonePressed += id => ToggleTaskCompletion?.Invoke(id);
        }

        TabsDepartmentTask.RemoveAllChildren();

        foreach (var (department, tasks, index) in departmentTasks.OrderBy(x => x.Key).Select((x, i) => (x.Key, x.Value, i)))
        {
            var table = new NanoTaskTable();

            foreach (var task in tasks)
            {
                var container = task.Data.Priority switch
                {
                    NanoTaskPriority.High => table.HighContainer,
                    NanoTaskPriority.Medium => table.MediumContainer,
                    NanoTaskPriority.Low => table.LowContainer,
                };
                var control = new NanoTaskItemControl(task);
                container.AddChild(control);
                control.OnMainPressed += id => OpenTask?.Invoke(id);
                control.OnDonePressed += id => ToggleTaskCompletion?.Invoke(id);
            }

            TabsDepartmentTask.AddChild(table);
            TabsDepartmentTask.SetTabTitle(index, Loc.GetString(department));
        }
    }

    public void UpdateStateNoServers()
    {
        TabsCategory.Visible = false;
        ConnectionBox.Visible = false;
        OfflineBox.Visible = true;

        OfflinePanel.PanelOverride = new StyleBoxFlat
        {
            BackgroundColor = Color.Red,
        };
    }
}
